apply plugin: 'com.android.application'

println("app --> print test")

def releaseDate() {
    return new Date().format("yyyy_MM_dd", TimeZone.getTimeZone("UTC"))
//    return new Date().format("yyyy-MM-dd aa hh:mm:ss", TimeZone.getTimeZone("UTC"))
}

def appId = rootProject.ext.android.appId

android {
    compileSdkVersion buildVersions.compileSdk

    signingConfigs {
        release {
            // 签名证书文件
            File strFile = new File(".././release.jks")
            storeFile file(strFile)
            // 签名证书文件密码
            storePassword "850899969"
            // 签名证书 秘钥别名
            keyAlias "fxp"
            // 签名证书 秘钥密码
            keyPassword "850899969"
            // 是否开启V2打包
            v2SigningEnabled true
        }
    }

    defaultConfig {
        applicationId appId
        minSdkVersion buildVersions.minSdk
        targetSdkVersion buildVersions.targetSdk
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        /**
         * 自定义变量
         * 三个非空参数：值类型、key、value（必须String）
         * 不能在 android 根节点，只能在 defaultConfig 或 buildTypes 节点下
         */
        buildConfigField "String", "BUILD_TIME", "\"${releaseDate()}\""

        buildConfigField "boolean", "isRelease", String.valueOf(isRelease)

        /**
         * 根据包名更改manifest配置
         */
        if (applicationId.equals("com.fxp.componentdev")) {
            resValue "string", "app_name", "组件化"
            manifestPlaceholders = [fxpExcludeFromRecents: false, fxpTaskAffinity: applicationId, fxpApplicationIcon: "@mipmap/icon_component"]
        } else {
            resValue "string", "app_name", "个人主页"
            manifestPlaceholders = [fxpExcludeFromRecents: true, fxpTaskAffinity: applicationId, fxpApplicationIcon: "@mipmap/icon_launcher_homepage"]
        }

        signingConfig signingConfigs.release    // signingConfigs 须在 defaultConfig 之前定义，否则会报错

        multiDexEnabled true     // 是否开启分包

        resConfigs('zh-rCN')    // 只保留指定和默认资源

        /**
         * 配置so库CPU架构（真机arm，模拟器x86）
         */
        ndk {
            abiFilters('armeabi', 'armeabi-v7a')
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = rootProject.ext.android.appName + "_V${variant.versionName}_${releaseDate()}.apk"
        }
    }

    // 多渠道打包
    flavorDimensions "default"
    productFlavors {
        productA {
            dimension "default"
            resValue "string", "app_name", rootProject.ext.android.appName
            manifestPlaceholders = [fxpExcludeFromRecents: false, fxpTaskAffinity: appId, fxpApplicationIcon: "@mipmap/icon_component"]
        }
        productB {
            dimension "default"
            resValue "string", "app_name", rootProject.ext.android.appName
            manifestPlaceholders = [fxpExcludeFromRecents: true, fxpTaskAffinity: appId, fxpApplicationIcon: "@mipmap/icon_launcher_homepage"]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            jniDebuggable false
            renderscriptDebuggable true
            minifyEnabled false
            pseudoLocalesEnabled false
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            if(isRelease){
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java.srcDirs = ['src/main/java']
                res.srcDirs = ['src/main/res']
                assets.srcDirs = ['src/main/assets']
                aidl.srcDirs = ['src/main/aidl']
            } else {

            }
        }

        productA.res.srcDirs = ['src/main/res-A']

        debug.setRoot('build-types/debug')

        release.setRoot('build-types/release')
    }

    /**
     * 对adb操作选项添加配置
     */
    adbOptions {

        // 配置操作超时时间，时间单位毫秒
        timeOutInMs 5 * 1000_0

        // adb install 命令配置
        installOptions '-r', '-s'
    }

    /**
     * 执行 gradle lint 命令即可运行 lint 检查，默认生成的报告在outputs/lint-results.html中
     */
    lintOptions {

        checkReleaseBuilds false

        // 遇到 lint 检查错误是否终止构建，一般设置为false
        abortOnError false

        // 将警告当做错误处理（老版本 warningAsErrors）
        warningsAsErrors false

        // 检查新Api
        check 'NewApi'
    }

    /**
     * AaptOptions的属性：
     * 1.additionalParameters:额外参数，List类型。
     * 2.cruncherEnabled：如果PNG图片是否可以大量快速的处理，boolean类型。 true表示可以。
     * 3.cruncherProcesses:快速处理，可能需要更多的内存和CPU。int类型。默认0，值越大处理越快，需要的内存和CPU也越大。
     * 4.failOnMissingConfigEntry:如果没有找到一个配置，就返回一个错误。Boolean值，默认false。
     * 5.ignoreAssetsPattern：忽略Assets模块。
     * 6.moCompress：拓展文件不会打包进apk中。
     */
    aaptOptions {
        cruncherEnabled false
    }

    /**
     * 对dx操作的配置，接受一个DexOptions类型的闭包，配置由DexOptions提供
     */
    dexOptions {

        // 配置执行 dx 命令时为其分配的最大内存
        javaMaxHeapSize '4g'

        // 配置是否预执行 dex Libraries 工程，开启后会提高增量构建速度，会影响clean构建的速度，默认为true
        preDexLibraries false

        // 配置是否开启 jumbo 模式，代码方法数超过65535时，需要强制开启才能构建成功
        jumboMode true

        // 配置Gradle运行dx命令时使用的线程数
        threadCount 8

        // 配置 multidex 参数
        additionalParameters = [
                '--multi-dex',  // 多dex分包
                '--set-max-idx-number=5000',    // 每个包内方法数上限
//                '--main-dex-list=' + '/multidex-config.txt',     // 打包到主 classes.dex 的文件列表
                '--minimal-main-dex'
        ]
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps.support.appcompat_v7

//    implementation deps.view.constraint

    /**
     * 遍历引入 support 库
     */
    deps.support.each { k, v -> implementation v }

    implementation project(':module_common')

    implementation project(':module_cordova')

    if (isRelease){
        implementation project(':module_homepage')
        implementation project(':module_personalpage')
    }
}
